{"version":3,"sources":["components/Box.js","util/responsiveHelper.js","components/Text.js","components/Header.js","pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Box","styled","div","space","layout","flexbox","color","generateSizes","size","factor","Array","from","map","_v","i","Math","max","VARIANTS_BASE","Text","glowColors","css","fromColor","toColor","pulse","keyframes","typography","variant","variants","medium","fontSize","large","propTypes","oneOf","string","bool","defaultProps","Header","children","width","minWidth","height","display","alignItems","justifyContent","bg","marginLeft","textAlign","onClick","elem","document","documentElement","setAttribute","getAttribute","HomePage","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.712815e3.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport { space, layout, flexbox, color } from 'styled-system'\n\nconst Box = styled.div`\n  ${space}\n  ${layout}\n  ${flexbox}\n  ${color}\n`\n\nexport default Box\n","const RESPONSIVE_FACTOR = 1.3\n\nexport const generateSizes = (size, factor = RESPONSIVE_FACTOR) =>\n  Array.from(Array(4)).map((_v, i) => size * Math.max(1, i * factor - i + 1))\n","import styled, { keyframes, css } from 'styled-components'\nimport {\n  space,\n  layout,\n  color,\n  typography,\n  flexbox,\n  variant,\n} from 'styled-system'\nimport { oneOf, string, bool } from 'prop-types'\n\nimport { generateSizes } from '../util/responsiveHelper'\n\nconst VARIANTS_BASE = {\n  medium: 18,\n  large: 24,\n}\n\nconst glow = (fromColor, toColor) => keyframes`\n  from {\n    text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px ${fromColor}, 0 0 40px ${fromColor}, 0 0 50px ${fromColor}, 0 0 60px ${fromColor}, 0 0 70px ${fromColor};\n  }\n  to {\n    text-shadow: 0 0 20px #fff, 0 0 30px ${toColor}, 0 0 40px ${toColor}, 0 0 50px ${toColor}, 0 0 60px ${toColor}, 0 0 70px ${toColor}, 0 0 80px ${toColor};\n  }\n`\n\nconst Text = styled.div` \n  ${({ glowColors }) =>\n    glowColors[0] &&\n    css`\n      text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px ${glowColors[0]},\n        0 0 40px ${glowColors[0]}, 0 0 50px ${glowColors[0]},\n        0 0 60px ${glowColors[0]}, 0 0 70px ${glowColors[0]};\n    `}\n  ${({ glowColors, pulse }) =>\n    glowColors &&\n    pulse &&\n    css`\n      animation: ${glow(glowColors[1], glowColors[0])} 1s ease-in-out infinite\n        alternate;\n    `}\n  ${space}\n  ${layout}\n  ${color}\n  ${typography}\n  ${flexbox}\n  ${variant({\n    variants: {\n      medium: {\n        fontSize: generateSizes(VARIANTS_BASE['medium']),\n      },\n      large: {\n        fontSize: generateSizes(VARIANTS_BASE['large']),\n      },\n    },\n  })}`\n\nText.propTypes = {\n  variant: oneOf(['medium', 'large']),\n  glowColors: string,\n  pulse: bool,\n}\n\nText.defaultProps = {\n  variant: 'medium',\n}\n\nexport default Text\n","import React from 'react'\nimport { string } from 'prop-types'\n\nimport Box from './Box'\nimport Text from './Text'\nimport { generateSizes } from '../util/responsiveHelper'\n\nconst Header = ({ children }) => {\n  const onThemeChange = () => {\n    const elem = document.documentElement\n    elem.setAttribute(\n      'data-theme',\n      elem.getAttribute('data-theme') === 'dark' ? 'light' : 'dark'\n    )\n  }\n\n  return (\n    <header>\n      <Box\n        width={1}\n        minWidth={350}\n        height={generateSizes(120, 1.1)}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        bg=\"var(--secondary-bg-color)\"\n      >\n        <Text\n          variant=\"large\"\n          color=\"var(--primary-header-color)\"\n          marginLeft=\"auto\"\n          textAlign=\"center\"\n          glowColors={[\n            'var(--primary-header-primary-glow-color)',\n            'var(--primary-header-secondary-glow-color)',\n          ]}\n          pulse\n        >\n          {children}\n        </Text>\n        <Box\n          width={['5%', '3.5%', '2%', '1.5%']}\n          height=\"100%\"\n          marginLeft=\"auto\"\n          bg=\"var(--opposite-theme-bg-color)\"\n          onClick={onThemeChange}\n        />\n      </Box>\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  children: string.isRequired,\n}\n\nexport default Header\n","import React from 'react'\n\nimport Header from '../components/Header'\n\nconst HomePage = () => {\n  return <Header>Per Jansson - Fullstack Web Developer</Header>\n}\n\nexport default HomePage\n","import React from 'react'\nimport HomePage from './pages/HomePage'\n\nfunction App() {\n  return <HomePage />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}